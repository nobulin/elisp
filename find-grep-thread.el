
(load (expand-file-name "./task-lib") nil t)

(defun find-type-f-lisp (directory fexp)
  (let (files dirs (current directory) (match "[^.]$"))
    (while (progn (dolist (file (directory-files current t match))
		    (if (file-directory-p file)
			(push file dirs)
		      (and (string-match fexp file) (push file files))))
		  (setq current (pop dirs))))
    (sort files 'string<)))

(defun find-grep-buffer ()
  (let* ((name (thread-name (current-thread)))
	 (task-id (get-task name))
	 (gexp (car (get-task-args task-id)))
	 (buffer (get-task-buff task-id))
	 (mutex (get-task-lock task-id)))
    (with-mutex mutex
      (with-temp-buffer
	(insert-file-contents name)
	(goto-char (point-min))
	(while (re-search-forward gexp nil t)
	  (sit-for 0.1)
	  (let ((line (count-lines (point-min) (point)))
		(found (buffer-substring-no-properties (line-beginning-position)
						       (progn (forward-line) (point)))))
	    (with-current-buffer buffer (insert (format "%s:%d: %s" name line found)))))))))

(defun find-grep-thread (dir fexp gexp)
  (interactive "Ddir: \nsfilename regexp: \nssearch keyword: ")
  (let* ((files (find-type-f-lisp dir fexp))
	 (buffer (generate-new-buffer "*Find-Grep-Thread*")))
    (dolist (file files)
      (let* ((task-id (create-task file 'find-grep-buffer (list gexp))))
	(start-task task-id)
	(wait-count-task 3)))
    (while (not (zerop (apply #'+ (mapcar #'(lambda (thr)
					      (if (member (thread-name thr) files) 1 0))
					  (all-threads)))))
      (sit-for 0.1))
    (with-current-buffer buffer
      (goto-char (point-min))
      (dolist (obj (reverse task-list))
	(let ((tbuff (get-task-buff obj)))
	  (insert-before-markers (with-current-buffer tbuff (buffer-string)))
	  (exit-task obj)))
      (compilation-mode)
      (pop-to-buffer (current-buffer)))))
